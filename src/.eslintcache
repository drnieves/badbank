[{"C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\index.js":"1","C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\App.js":"2","C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\reportWebVitals.js":"3","C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\MyContext.js":"4","C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\Navbar.js":"5","C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\CreateAccount.js":"6","C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\Deposit.js":"7","C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\Home.js":"8","C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\Withdraw.js":"9","C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\AllData.js":"10","C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\Card.js":"11"},{"size":349,"mtime":1639672564129,"results":"12","hashOfConfig":"13"},{"size":808,"mtime":1639672564124,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1639672564129,"results":"15","hashOfConfig":"13"},{"size":8976,"mtime":1639756205699,"results":"16","hashOfConfig":"13"},{"size":3449,"mtime":1639755511647,"results":"17","hashOfConfig":"13"},{"size":2653,"mtime":1639755523055,"results":"18","hashOfConfig":"13"},{"size":1363,"mtime":1639757234496,"results":"19","hashOfConfig":"13"},{"size":510,"mtime":1639755520325,"results":"20","hashOfConfig":"13"},{"size":1378,"mtime":1639755974478,"results":"21","hashOfConfig":"13"},{"size":2075,"mtime":1639755723077,"results":"22","hashOfConfig":"13"},{"size":690,"mtime":1639672564124,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1o1nctl",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\index.js",[],["48","49"],"C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\App.js",[],"C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\reportWebVitals.js",[],"C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\MyContext.js",["50","51","52","53","54","55","56"],"import React, { createContext, useState } from \"react\";\r\n\r\nconst MyContext = createContext();\r\n\r\nfunction MyContextProvider({ children }) {\r\n  //from CREATE ACCOUNT COMPONENT\r\n  const [successMessageVisible, setSuccessMessageVisible] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [nameError, setNameError] = useState(\"\");\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [passwError, setPasswError] = useState(\"\");\r\n  const [users, setUsers] = useState([]);\r\n\r\n  let nameErrorStr = \"\";\r\n  let emailErrorStr = \"\";\r\n  let passwordErrorStr = \"\";\r\n\r\n  //NO INPUT + ADDITIONAL VALIDATION\r\n  const validate = () => {\r\n    setEmailError(\"\");\r\n    setNameError(\"\");\r\n    setPasswError(\"\");\r\n\r\n    if (!email) {\r\n      emailErrorStr = \"Oops! Tu email no puede estra en blanco.\";\r\n      //additional: email length\r\n    } else if (email.length == 1) {\r\n      emailErrorStr = \"Email debe ser mas largo que este.\";\r\n    }\r\n\r\n    if (!name) {\r\n      nameErrorStr = \"Oops! Tu nombre no puede quedar en blanco.\";\r\n      //additional: name length\r\n    } else if (name.length < 3) {\r\n      nameErrorStr = \"Nombre debe ser mas largo.\";\r\n    }\r\n\r\n    if (!password) {\r\n      passwordErrorStr = \"Oops! Tu contraseña no puede estar en blanco.\";\r\n    }\r\n\r\n    //validate if there's no error message\r\n    if (nameErrorStr == \"\") {\r\n      validateName(name);\r\n    }\r\n\r\n    if (emailErrorStr == \"\") {\r\n      validateEmail(email);\r\n    }\r\n\r\n    if (passwordErrorStr == \"\") {\r\n      validatePassword(password);\r\n    }\r\n\r\n    setNameError(nameErrorStr);\r\n    setEmailError(emailErrorStr);\r\n    setPasswError(passwordErrorStr);\r\n    return (\r\n      nameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"\r\n    ); //returns true and validate() is executed\r\n  };\r\n\r\n  const validateName = (newName) => {\r\n    //additonal: limiting input to the letters of the English alphabet, including capital letters\r\n    if (!newName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\r\n      nameErrorStr = \"Ingresa solo letras.\";\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  //additional: email formatting\r\n  const validateEmail = (newEmail) => {\r\n    let emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/;\r\n    let isValidFormat = (str) => {\r\n      return str.match(emailFormat);\r\n    };\r\n\r\n    if (!isValidFormat(newEmail)) {\r\n      emailErrorStr = \"Oops! email no valido.\";\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const validatePassword = (newPassword) => {\r\n    if (newPassword.length == 1 || newPassword.length < 8) {\r\n      passwordErrorStr = \"La contraseña debe ser mas larga.\";\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  //validation on onClick / Create Account button\r\n  const handleClick = (e) => {\r\n    if (validate()) {\r\n      setSuccessMessageVisible(true);\r\n      //adding all new users, for \"All Data\"\r\n      let newUser = {\r\n        name: name,\r\n        email: email,\r\n        password: password,\r\n      };\r\n      setUsers((users) => users.concat(newUser));\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  //FORM INPUT\r\n  const handleNameChange = (e) => {\r\n    // setName(e.currentTarget.value); //if there's no letter validation\r\n    let newName = e.currentTarget.value;\r\n    if (!newName || validateName(newName)) {\r\n      setName(newName);\r\n    }\r\n  };\r\n\r\n  const handleEmailChange = (e) => {\r\n    setEmail(e.currentTarget.value);\r\n  };\r\n\r\n  const handlePasswordChange = (e) => {\r\n    setPassword(e.currentTarget.value);\r\n  };\r\n\r\n  //firing when creating new account\r\n  const clearForm = () => {\r\n    setName(\"\");\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n    setSuccessMessageVisible(false);\r\n  };\r\n\r\n  // ------------------------------------------------------\r\n\r\n  //from DEPOSIT COMPONENT\r\n  let [depositAmount, setDepositAmount] = useState(0.0);\r\n  let [balance, setBalance] = useState(0.0);\r\n  let [depositError, setDepositError] = useState(\"\");\r\n  let [depositArr, setDepositArr] = useState([]);\r\n\r\n  let depositErrorStr = \"\";\r\n\r\n  //validating numbers for deposit and withdraw\r\n  const validateNr = (newValue) => {\r\n    //clear error when there's new input\r\n    setDepositError(\"\");\r\n    setWithdrawError(\"\");\r\n\r\n    if (!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) {\r\n      //this regex matches numbers from 0 to 9 and + decimal numbers\r\n      depositErrorStr = \"Ingresa solo numeros.\";\r\n      setDepositError(depositErrorStr);\r\n      return false; //didn't validate\r\n    }\r\n    return true; //did validate\r\n  };\r\n\r\n  //input\r\n  const handleChange = (e) => {\r\n    let newValue = e.target.value;\r\n    if (validateNr(newValue) || !newValue) {\r\n      setDepositAmount(newValue);\r\n    } else {\r\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\r\n    }\r\n    setSuccessMessageVisible(false);\r\n  };\r\n\r\n  //submit + additional validation\r\n  const submitDeposit = (currentValue) => {\r\n    if (currentValue == 0.0) {\r\n      depositErrorStr = \"La cantidad debe ser mayor a  0.\";\r\n      setDepositError(depositErrorStr);\r\n      setWithdrawSuccessMessageVisible(false);\r\n      return;\r\n    }\r\n\r\n    if (currentValue.length >= 7) {\r\n      depositErrorStr = \"La cantidad debe ser menor a esta.\";\r\n      setDepositError(depositErrorStr);\r\n      setWithdrawSuccessMessageVisible(false);\r\n      return;\r\n    }\r\n\r\n    //total amount / balance\r\n    balance += parseFloat(currentValue);\r\n    setBalance(balance);\r\n    setSuccessMessageVisible(true);\r\n    setDepositAmount(0.0);\r\n\r\n    //all new deposits for \"All Data\"\r\n    let newDeposit = {\r\n      depositAmount: depositAmount,\r\n    };\r\n\r\n    setDepositArr((depositArr) => depositArr.concat(newDeposit));\r\n  };\r\n\r\n  let showHideSuccessMessage = () => {\r\n    if (successMessageVisible) {\r\n      return (\r\n        <div className=\"message mt-4\">\r\n          <h7>Tu deposito ha sido recibido!</h7>\r\n        </div>\r\n      );\r\n    }\r\n    return;\r\n  };\r\n\r\n  // ------------------------------------------------------\r\n\r\n  //from WITHDRAW COMPONENT\r\n  let [withdrawAmount, setWithdrawAmount] = useState(0.0);\r\n  let [withdrawError, setWithdrawError] = useState(\"\");\r\n  const [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] =\r\n    useState(false);\r\n  let [withdrawArr, setWithdrawArr] = useState([]);\r\n\r\n  let withdrawErrorStr = \"\";\r\n\r\n  //input\r\n  const withdrawHandleChange = (e) => {\r\n    let newValue = e.target.value;\r\n    if (validateNr(newValue) || !newValue) {\r\n      withdrawErrorStr = \"Ingresa solo numeros.\";\r\n      setWithdrawAmount(newValue);\r\n    } else {\r\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\r\n    }\r\n    setWithdrawSuccessMessageVisible(false);\r\n  };\r\n\r\n  //submit + additional validation\r\n  const submitWithdrawal = (currentValue) => {\r\n    if (currentValue == 0.0) {\r\n      withdrawErrorStr = \"La cantidad debe ser mayor que 0.\";\r\n      setWithdrawError(withdrawErrorStr);\r\n      setWithdrawSuccessMessageVisible(false);\r\n      return;\r\n    }\r\n\r\n    if (currentValue.length >= 7) {\r\n      withdrawErrorStr = \"La cantidad debe ser menor a esta.\";\r\n      setWithdrawError(withdrawErrorStr);\r\n      setWithdrawSuccessMessageVisible(false);\r\n      return;\r\n    }\r\n\r\n    if (currentValue > balance) {\r\n      withdrawErrorStr = \"La cantidad es mayor que el dinero en tu cuenta.\";\r\n      setWithdrawError(withdrawErrorStr);\r\n      setWithdrawSuccessMessageVisible(false);\r\n    } else {\r\n      setBalance(balance - parseFloat(currentValue));\r\n      setWithdrawError(\"\");\r\n      setWithdrawSuccessMessageVisible(true);\r\n      setWithdrawAmount(0.0);\r\n\r\n      //all withdrawals, for \"All Data\"\r\n      let newWithdraw = {\r\n        withdrawAmount: withdrawAmount,\r\n      };\r\n\r\n      setWithdrawArr((withdrawArr) => withdrawArr.concat(newWithdraw));\r\n    }\r\n  };\r\n\r\n  let showHideSuccessMessageWithdraw = () => {\r\n    if (withdrawSuccessMessageVisible) {\r\n      return (\r\n        <div className=\"message mt-4\">\r\n          <h6>Tu retiro fue exitoso!</h6>\r\n        </div>\r\n      );\r\n    }\r\n    return;\r\n  };\r\n\r\n  const defaultContext = {\r\n    //state:\r\n    name,\r\n    email,\r\n    password,\r\n    nameError,\r\n    emailError,\r\n    passwError,\r\n    depositAmount,\r\n    balance,\r\n    depositError,\r\n    successMessageVisible,\r\n    withdrawSuccessMessageVisible,\r\n    withdrawAmount,\r\n    withdrawError,\r\n    users,\r\n    depositArr,\r\n    withdrawArr,\r\n    //functions:\r\n    validate,\r\n    handleClick,\r\n    handleNameChange,\r\n    handleEmailChange,\r\n    handlePasswordChange,\r\n    clearForm,\r\n    validateNr,\r\n    handleChange,\r\n    submitDeposit,\r\n    showHideSuccessMessage,\r\n    withdrawHandleChange,\r\n    submitWithdrawal,\r\n    showHideSuccessMessageWithdraw,\r\n  };\r\n\r\n  return (\r\n    <MyContext.Provider value={defaultContext}>{children}</MyContext.Provider>\r\n  );\r\n}\r\n\r\nexport { MyContext, MyContextProvider };\r\n","C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\Navbar.js",[],"C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\CreateAccount.js",[],"C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\Deposit.js",[],"C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\Home.js",[],"C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\Withdraw.js",[],"C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\AllData.js",[],"C:\\Users\\CLAUDIA\\work\\repos\\reactclass\\badbank\\src\\Card.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":29,"column":29,"nodeType":"63","messageId":"64","endLine":29,"endColumn":31},{"ruleId":"61","severity":1,"message":"62","line":45,"column":22,"nodeType":"63","messageId":"64","endLine":45,"endColumn":24},{"ruleId":"61","severity":1,"message":"62","line":49,"column":23,"nodeType":"63","messageId":"64","endLine":49,"endColumn":25},{"ruleId":"61","severity":1,"message":"62","line":53,"column":26,"nodeType":"63","messageId":"64","endLine":53,"endColumn":28},{"ruleId":"61","severity":1,"message":"62","line":89,"column":28,"nodeType":"63","messageId":"64","endLine":89,"endColumn":30},{"ruleId":"61","severity":1,"message":"62","line":175,"column":22,"nodeType":"63","messageId":"64","endLine":175,"endColumn":24},{"ruleId":"61","severity":1,"message":"62","line":239,"column":22,"nodeType":"63","messageId":"64","endLine":239,"endColumn":24},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]
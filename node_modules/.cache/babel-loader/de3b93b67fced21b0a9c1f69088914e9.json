{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CLAUDIA\\\\work\\\\repos\\\\reactclass\\\\malbanco\\\\src\\\\MyContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyContext = /*#__PURE__*/createContext();\n\nfunction MyContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //from CREATE ACCOUNT COMPONENT\n  const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [nameError, setNameError] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwError, setPasswError] = useState(\"\");\n  const [users, setUsers] = useState([]);\n  let nameErrorStr = \"\";\n  let emailErrorStr = \"\";\n  let passwordErrorStr = \"\"; //NO INPUT + ADDITIONAL VALIDATION\n\n  const validate = () => {\n    setEmailError(\"\");\n    setNameError(\"\");\n    setPasswError(\"\");\n\n    if (!email) {\n      emailErrorStr = \"Oops! Tu email no puede estra en blanco.\"; //additional: email length\n    } else if (email.length == 1) {\n      emailErrorStr = \"Email debe ser mas largo que este.\";\n    }\n\n    if (!name) {\n      nameErrorStr = \"Oops! Tu nombre no puede quedar en blanco.\"; //additional: name length\n    } else if (name.length < 3) {\n      nameErrorStr = \"Nombre debe ser mas largo.\";\n    }\n\n    if (!password) {\n      passwordErrorStr = \"Oops! Tu contraseña no puede estar en blanco.\";\n    } //validate if there's no error message\n\n\n    if (nameErrorStr == \"\") {\n      validateName(name);\n    }\n\n    if (emailErrorStr == \"\") {\n      validateEmail(email);\n    }\n\n    if (passwordErrorStr == \"\") {\n      validatePassword(password);\n    }\n\n    setNameError(nameErrorStr);\n    setEmailError(emailErrorStr);\n    setPasswError(passwordErrorStr);\n    return nameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n  };\n\n  const validateName = newName => {\n    //additonal: limiting input to the letters of the English alphabet, including capital letters\n    if (!newName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n      nameErrorStr = \"Ingresa solo letras.\";\n      return false;\n    }\n\n    return true;\n  }; //additional: email formatting\n\n\n  const validateEmail = newEmail => {\n    let emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/;\n\n    let isValidFormat = str => {\n      return str.match(emailFormat);\n    };\n\n    if (!isValidFormat(newEmail)) {\n      emailErrorStr = \"Oops! email no valido.\";\n      return false;\n    }\n\n    return true;\n  };\n\n  const validatePassword = newPassword => {\n    if (newPassword.length == 1 || newPassword.length < 8) {\n      passwordErrorStr = \"La contraseña debe ser mas larga.\";\n      return false;\n    }\n\n    return true;\n  }; //validation on onClick / Create Account button\n\n\n  const handleClick = e => {\n    if (validate()) {\n      setSuccessMessageVisible(true); //adding all new users, for \"All Data\"\n\n      let newUser = {\n        name: name,\n        email: email,\n        password: password\n      };\n      setUsers(users => users.concat(newUser));\n    } else {\n      return;\n    }\n  }; //FORM INPUT\n\n\n  const handleNameChange = e => {\n    // setName(e.currentTarget.value); //if there's no letter validation\n    let newName = e.currentTarget.value;\n\n    if (!newName || validateName(newName)) {\n      setName(newName);\n    }\n  };\n\n  const handleEmailChange = e => {\n    setEmail(e.currentTarget.value);\n  };\n\n  const handlePasswordChange = e => {\n    setPassword(e.currentTarget.value);\n  }; //firing when creating new account\n\n\n  const clearForm = () => {\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    setSuccessMessageVisible(false);\n  }; // ------------------------------------------------------\n  //from DEPOSIT COMPONENT\n\n\n  let [depositAmount, setDepositAmount] = useState(0.0);\n  let [balance, setBalance] = useState(0.0);\n  let [depositError, setDepositError] = useState(\"\");\n  let [depositArr, setDepositArr] = useState([]);\n  let depositErrorStr = \"\"; //validating numbers for deposit and withdraw\n\n  const validateNr = newValue => {\n    //clear error when there's new input\n    setDepositError(\"\");\n    setWithdrawError(\"\");\n\n    if (!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) {\n      //this regex matches numbers from 0 to 9 and + decimal numbers\n      depositErrorStr = \"Ingresa solo numeros.\";\n      setDepositError(depositErrorStr);\n      return false; //didn't validate\n    }\n\n    return true; //did validate\n  }; //input\n\n\n  const handleChange = e => {\n    let newValue = e.target.value;\n\n    if (validateNr(newValue) || !newValue) {\n      setDepositAmount(newValue);\n    } else {\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n    }\n\n    setSuccessMessageVisible(false);\n  }; //submit + additional validation\n\n\n  const submitDeposit = currentValue => {\n    if (currentValue == 0.0) {\n      depositErrorStr = \"La cantidad debe ser mayor a  0.\";\n      setDepositError(depositErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue.length >= 7) {\n      depositErrorStr = \"La cantidad debe ser menor a esta.\";\n      setDepositError(depositErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return;\n    } //total amount / balance\n\n\n    balance += parseFloat(currentValue);\n    setBalance(balance);\n    setSuccessMessageVisible(true);\n    setDepositAmount(0.0); //all new deposits for \"All Data\"\n\n    let newDeposit = {\n      depositAmount: depositAmount\n    };\n    setDepositArr(depositArr => depositArr.concat(newDeposit));\n  };\n\n  let showHideSuccessMessage = () => {\n    if (successMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h7\", {\n          children: \"Tu deposito ha sido recibido!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this);\n    }\n\n    return;\n  }; // ------------------------------------------------------\n  //from WITHDRAW COMPONENT\n\n\n  let [withdrawAmount, setWithdrawAmount] = useState(0.0);\n  let [withdrawError, setWithdrawError] = useState(\"\");\n  const [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] = useState(false);\n  let [withdrawArr, setWithdrawArr] = useState([]);\n  let withdrawErrorStr = \"\"; //input\n\n  const withdrawHandleChange = e => {\n    let newValue = e.target.value;\n\n    if (validateNr(newValue) || !newValue) {\n      withdrawErrorStr = \"Ingresa solo numeros.\";\n      setWithdrawAmount(newValue);\n    } else {\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n    }\n\n    setWithdrawSuccessMessageVisible(false);\n  }; //submit + additional validation\n\n\n  const submitWithdrawal = currentValue => {\n    if (currentValue == 0.0) {\n      withdrawErrorStr = \"La cantidad debe ser mayor que 0.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue.length >= 7) {\n      withdrawErrorStr = \"La cantidad debe ser menor a esta.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue > balance) {\n      withdrawErrorStr = \"La cantidad es mayor que el dinero en tu cuenta.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n    } else {\n      setBalance(balance - parseFloat(currentValue));\n      setWithdrawError(\"\");\n      setWithdrawSuccessMessageVisible(true);\n      setWithdrawAmount(0.0); //all withdrawals, for \"All Data\"\n\n      let newWithdraw = {\n        withdrawAmount: withdrawAmount\n      };\n      setWithdrawArr(withdrawArr => withdrawArr.concat(newWithdraw));\n    }\n  };\n\n  let showHideSuccessMessageWithdraw = () => {\n    if (withdrawSuccessMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"Tu retiro fue exitoso!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this);\n    }\n\n    return;\n  };\n\n  const defaultContext = {\n    //state:\n    name,\n    email,\n    password,\n    nameError,\n    emailError,\n    passwError,\n    depositAmount,\n    balance,\n    depositError,\n    successMessageVisible,\n    withdrawSuccessMessageVisible,\n    withdrawAmount,\n    withdrawError,\n    users,\n    depositArr,\n    withdrawArr,\n    //functions:\n    validate,\n    handleClick,\n    handleNameChange,\n    handleEmailChange,\n    handlePasswordChange,\n    clearForm,\n    validateNr,\n    handleChange,\n    submitDeposit,\n    showHideSuccessMessage,\n    withdrawHandleChange,\n    submitWithdrawal,\n    showHideSuccessMessageWithdraw\n  };\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: defaultContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MyContextProvider, \"lODViG0scwRtmm3zLOoQyybazZA=\");\n\n_c = MyContextProvider;\nexport { MyContext, MyContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"MyContextProvider\");","map":{"version":3,"sources":["C:/Users/CLAUDIA/work/repos/reactclass/malbanco/src/MyContext.js"],"names":["React","createContext","useState","MyContext","MyContextProvider","children","successMessageVisible","setSuccessMessageVisible","name","setName","email","setEmail","password","setPassword","nameError","setNameError","emailError","setEmailError","passwError","setPasswError","users","setUsers","nameErrorStr","emailErrorStr","passwordErrorStr","validate","length","validateName","validateEmail","validatePassword","newName","match","newEmail","emailFormat","isValidFormat","str","newPassword","handleClick","e","newUser","concat","handleNameChange","currentTarget","value","handleEmailChange","handlePasswordChange","clearForm","depositAmount","setDepositAmount","balance","setBalance","depositError","setDepositError","depositArr","setDepositArr","depositErrorStr","validateNr","newValue","setWithdrawError","handleChange","target","slice","submitDeposit","currentValue","setWithdrawSuccessMessageVisible","parseFloat","newDeposit","showHideSuccessMessage","withdrawAmount","setWithdrawAmount","withdrawError","withdrawSuccessMessageVisible","withdrawArr","setWithdrawArr","withdrawErrorStr","withdrawHandleChange","submitWithdrawal","newWithdraw","showHideSuccessMessageWithdraw","defaultContext"],"mappings":"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","sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\nconst MyContext = createContext();\r\n\r\nfunction MyContextProvider({ children }) {\r\n  //from CREATE ACCOUNT COMPONENT\r\n  const [successMessageVisible, setSuccessMessageVisible] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [nameError, setNameError] = useState(\"\");\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [passwError, setPasswError] = useState(\"\");\r\n  const [users, setUsers] = useState([]);\r\n\r\n  let nameErrorStr = \"\";\r\n  let emailErrorStr = \"\";\r\n  let passwordErrorStr = \"\";\r\n\r\n  //NO INPUT + ADDITIONAL VALIDATION\r\n  const validate = () => {\r\n    setEmailError(\"\");\r\n    setNameError(\"\");\r\n    setPasswError(\"\");\r\n\r\n    if (!email) {\r\n      emailErrorStr = \"Oops! Tu email no puede estra en blanco.\";\r\n      //additional: email length\r\n    } else if (email.length == 1) {\r\n      emailErrorStr = \"Email debe ser mas largo que este.\";\r\n    }\r\n\r\n    if (!name) {\r\n      nameErrorStr = \"Oops! Tu nombre no puede quedar en blanco.\";\r\n      //additional: name length\r\n    } else if (name.length < 3) {\r\n      nameErrorStr = \"Nombre debe ser mas largo.\";\r\n    }\r\n\r\n    if (!password) {\r\n      passwordErrorStr = \"Oops! Tu contraseña no puede estar en blanco.\";\r\n    }\r\n\r\n    //validate if there's no error message\r\n    if (nameErrorStr == \"\") {\r\n      validateName(name);\r\n    }\r\n\r\n    if (emailErrorStr == \"\") {\r\n      validateEmail(email);\r\n    }\r\n\r\n    if (passwordErrorStr == \"\") {\r\n      validatePassword(password);\r\n    }\r\n\r\n    setNameError(nameErrorStr);\r\n    setEmailError(emailErrorStr);\r\n    setPasswError(passwordErrorStr);\r\n    return (\r\n      nameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"\r\n    ); //returns true and validate() is executed\r\n  };\r\n\r\n  const validateName = (newName) => {\r\n    //additonal: limiting input to the letters of the English alphabet, including capital letters\r\n    if (!newName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\r\n      nameErrorStr = \"Ingresa solo letras.\";\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  //additional: email formatting\r\n  const validateEmail = (newEmail) => {\r\n    let emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/;\r\n    let isValidFormat = (str) => {\r\n      return str.match(emailFormat);\r\n    };\r\n\r\n    if (!isValidFormat(newEmail)) {\r\n      emailErrorStr = \"Oops! email no valido.\";\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const validatePassword = (newPassword) => {\r\n    if (newPassword.length == 1 || newPassword.length < 8) {\r\n      passwordErrorStr = \"La contraseña debe ser mas larga.\";\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  //validation on onClick / Create Account button\r\n  const handleClick = (e) => {\r\n    if (validate()) {\r\n      setSuccessMessageVisible(true);\r\n      //adding all new users, for \"All Data\"\r\n      let newUser = {\r\n        name: name,\r\n        email: email,\r\n        password: password,\r\n      };\r\n      setUsers((users) => users.concat(newUser));\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  //FORM INPUT\r\n  const handleNameChange = (e) => {\r\n    // setName(e.currentTarget.value); //if there's no letter validation\r\n    let newName = e.currentTarget.value;\r\n    if (!newName || validateName(newName)) {\r\n      setName(newName);\r\n    }\r\n  };\r\n\r\n  const handleEmailChange = (e) => {\r\n    setEmail(e.currentTarget.value);\r\n  };\r\n\r\n  const handlePasswordChange = (e) => {\r\n    setPassword(e.currentTarget.value);\r\n  };\r\n\r\n  //firing when creating new account\r\n  const clearForm = () => {\r\n    setName(\"\");\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n    setSuccessMessageVisible(false);\r\n  };\r\n\r\n  // ------------------------------------------------------\r\n\r\n  //from DEPOSIT COMPONENT\r\n  let [depositAmount, setDepositAmount] = useState(0.0);\r\n  let [balance, setBalance] = useState(0.0);\r\n  let [depositError, setDepositError] = useState(\"\");\r\n  let [depositArr, setDepositArr] = useState([]);\r\n\r\n  let depositErrorStr = \"\";\r\n\r\n  //validating numbers for deposit and withdraw\r\n  const validateNr = (newValue) => {\r\n    //clear error when there's new input\r\n    setDepositError(\"\");\r\n    setWithdrawError(\"\");\r\n\r\n    if (!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) {\r\n      //this regex matches numbers from 0 to 9 and + decimal numbers\r\n      depositErrorStr = \"Ingresa solo numeros.\";\r\n      setDepositError(depositErrorStr);\r\n      return false; //didn't validate\r\n    }\r\n    return true; //did validate\r\n  };\r\n\r\n  //input\r\n  const handleChange = (e) => {\r\n    let newValue = e.target.value;\r\n    if (validateNr(newValue) || !newValue) {\r\n      setDepositAmount(newValue);\r\n    } else {\r\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\r\n    }\r\n    setSuccessMessageVisible(false);\r\n  };\r\n\r\n  //submit + additional validation\r\n  const submitDeposit = (currentValue) => {\r\n    if (currentValue == 0.0) {\r\n      depositErrorStr = \"La cantidad debe ser mayor a  0.\";\r\n      setDepositError(depositErrorStr);\r\n      setWithdrawSuccessMessageVisible(false);\r\n      return;\r\n    }\r\n\r\n    if (currentValue.length >= 7) {\r\n      depositErrorStr = \"La cantidad debe ser menor a esta.\";\r\n      setDepositError(depositErrorStr);\r\n      setWithdrawSuccessMessageVisible(false);\r\n      return;\r\n    }\r\n\r\n    //total amount / balance\r\n    balance += parseFloat(currentValue);\r\n    setBalance(balance);\r\n    setSuccessMessageVisible(true);\r\n    setDepositAmount(0.0);\r\n\r\n    //all new deposits for \"All Data\"\r\n    let newDeposit = {\r\n      depositAmount: depositAmount,\r\n    };\r\n\r\n    setDepositArr((depositArr) => depositArr.concat(newDeposit));\r\n  };\r\n\r\n  let showHideSuccessMessage = () => {\r\n    if (successMessageVisible) {\r\n      return (\r\n        <div className=\"message mt-4\">\r\n          <h7>Tu deposito ha sido recibido!</h7>\r\n        </div>\r\n      );\r\n    }\r\n    return;\r\n  };\r\n\r\n  // ------------------------------------------------------\r\n\r\n  //from WITHDRAW COMPONENT\r\n  let [withdrawAmount, setWithdrawAmount] = useState(0.0);\r\n  let [withdrawError, setWithdrawError] = useState(\"\");\r\n  const [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] =\r\n    useState(false);\r\n  let [withdrawArr, setWithdrawArr] = useState([]);\r\n\r\n  let withdrawErrorStr = \"\";\r\n\r\n  //input\r\n  const withdrawHandleChange = (e) => {\r\n    let newValue = e.target.value;\r\n    if (validateNr(newValue) || !newValue) {\r\n      withdrawErrorStr = \"Ingresa solo numeros.\";\r\n      setWithdrawAmount(newValue);\r\n    } else {\r\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\r\n    }\r\n    setWithdrawSuccessMessageVisible(false);\r\n  };\r\n\r\n  //submit + additional validation\r\n  const submitWithdrawal = (currentValue) => {\r\n    if (currentValue == 0.0) {\r\n      withdrawErrorStr = \"La cantidad debe ser mayor que 0.\";\r\n      setWithdrawError(withdrawErrorStr);\r\n      setWithdrawSuccessMessageVisible(false);\r\n      return;\r\n    }\r\n\r\n    if (currentValue.length >= 7) {\r\n      withdrawErrorStr = \"La cantidad debe ser menor a esta.\";\r\n      setWithdrawError(withdrawErrorStr);\r\n      setWithdrawSuccessMessageVisible(false);\r\n      return;\r\n    }\r\n\r\n    if (currentValue > balance) {\r\n      withdrawErrorStr = \"La cantidad es mayor que el dinero en tu cuenta.\";\r\n      setWithdrawError(withdrawErrorStr);\r\n      setWithdrawSuccessMessageVisible(false);\r\n    } else {\r\n      setBalance(balance - parseFloat(currentValue));\r\n      setWithdrawError(\"\");\r\n      setWithdrawSuccessMessageVisible(true);\r\n      setWithdrawAmount(0.0);\r\n\r\n      //all withdrawals, for \"All Data\"\r\n      let newWithdraw = {\r\n        withdrawAmount: withdrawAmount,\r\n      };\r\n\r\n      setWithdrawArr((withdrawArr) => withdrawArr.concat(newWithdraw));\r\n    }\r\n  };\r\n\r\n  let showHideSuccessMessageWithdraw = () => {\r\n    if (withdrawSuccessMessageVisible) {\r\n      return (\r\n        <div className=\"message mt-4\">\r\n          <h6>Tu retiro fue exitoso!</h6>\r\n        </div>\r\n      );\r\n    }\r\n    return;\r\n  };\r\n\r\n  const defaultContext = {\r\n    //state:\r\n    name,\r\n    email,\r\n    password,\r\n    nameError,\r\n    emailError,\r\n    passwError,\r\n    depositAmount,\r\n    balance,\r\n    depositError,\r\n    successMessageVisible,\r\n    withdrawSuccessMessageVisible,\r\n    withdrawAmount,\r\n    withdrawError,\r\n    users,\r\n    depositArr,\r\n    withdrawArr,\r\n    //functions:\r\n    validate,\r\n    handleClick,\r\n    handleNameChange,\r\n    handleEmailChange,\r\n    handlePasswordChange,\r\n    clearForm,\r\n    validateNr,\r\n    handleChange,\r\n    submitDeposit,\r\n    showHideSuccessMessage,\r\n    withdrawHandleChange,\r\n    submitWithdrawal,\r\n    showHideSuccessMessageWithdraw,\r\n  };\r\n\r\n  return (\r\n    <MyContext.Provider value={defaultContext}>{children}</MyContext.Provider>\r\n  );\r\n}\r\n\r\nexport { MyContext, MyContextProvider };\r\n"]},"metadata":{},"sourceType":"module"}